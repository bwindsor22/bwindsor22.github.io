{"version":3,"sources":["app/components/Header.js","features/home/Home0.js","features/server/article-list.js","features/article-index/article-index-slice.js","features/article-index/article-preview.js","features/article-index/article-index.js","features/articles-components/trees-game-1.js","features/articles-components/articles-components-index.js","features/article-view/article-view.js","features/article-view/article-display.js","features/home/Home.js","features/about/about.js","App.js","features/counter/counter-slice.js","app/store.js","serviceWorker.js","index.js","features/articles-components/trees-game.png","features/home/hike.jpg"],"names":["Header","align","Alignment","LEFT","to","className","Classes","MINIMAL","icon","text","React","PureComponent","Home0","allTags","Set","Object","values","articles","flatMap","a","tags","articleIndexSlice","createSlice","name","initialState","selectedArticles","selectedTags","colorMap","colorList","reduce","acc","tag","index","reducers","setSelection","state","action","payload","selectedValues","map","v","value","filter","article","x","has","length","decrement","incrementByAmount","actions","history","useHistory","date","key","docBodyHtml","title","onClick","push","style","color","t","background","marginRight","ArticleIndex","allArticles","useSelector","articleIndex","dispatch","useDispatch","options","label","Container","Row","Col","xs","md","isMulti","onChange","val","TreesGame","href","Image","src","Tree","height","ArticleView","this","props","articleKey","console","log","articleComponents","serverArticleList","dangerouslySetInnerHTML","__html","ArticleDisplay","JSON","stringify","Component","connect","ownProps","match","params","Home","isMobile","window","innerWidth","hike","display","alignItems","size","fontWeight","About","App","onUpdate","scrollTo","exact","path","component","counterSlice","increment","configureStore","reducer","counter","counterReducer","articleIndexReducer","Boolean","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.dd702b76.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n    Alignment,\n    Button,\n    Classes,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n} from \"@blueprintjs/core\";\n\nexport class Header extends React.PureComponent{\n  render () {\n    return (<div>\n      <Navbar>\n        <NavbarGroup align={Alignment.LEFT}>\n            <Link to='/'>\n              <Button className={Classes.MINIMAL} icon=\"home\" text=\"Home\" />\n            </Link >\n            <Link to='/articles'>\n              <Button className={Classes.MINIMAL} icon=\"document\" text=\"Articles\" />\n            </Link>\n            {/*\n            <Link to='/game'>\n              <Button className={Classes.MINIMAL} icon=\"taxi\" text=\"Game\" />\n            </Link>\n            */}\n            <Link to='/about'>\n              <Button className={Classes.MINIMAL} icon=\"person\" text=\"About\" />\n            </Link>\n        </NavbarGroup>\n      </Navbar>\n    </div>)\n  }\n}\n","import React from 'react';\n\nexport const Home0 = () => {\n\n  return <div className='.modifier'>\n      <h1> Home page 0 </h1>\n  </div>\n}\n","export default {\n    'sass-sent-simp': {\n      'title': 'SASS: Data and Methods for Subject Aware Sentence Simplification',\n      'key': 'sass-sent-simp',\n      'date': '2020-12-14',\n      'tags': ['research'],\n      'docBodyHtml': `\n      In a new <a href='https://drive.google.com/file/d/1Rz35LBv15XQRDdiWC5xjcdXUL5GE6GqT/view?usp=sharing'>paper</a> \n      (and <a href='https://docs.google.com/presentation/d/1qyJ1oJRRUXdCz4oTw9wnQpN0jFOR-ZwlgKmDocG3hAI/edit?usp=sharing'>presentation</a>\n      ) under the guidance of Professor <a href='https://hhexiy.github.io/'>He He</a>, we explore an answer to a remarkably pesky question: what does it mean to simplify?\n\n      \n      <div class=\"bp3-card\">\n        <p class=\".modifier\">\n        Sentence simplification tends to focus on the generic simplification of sentences by making them more readable and easier to understand. This  paper  provides a dataset aimed  at  training  models  that  perform  subject  aware  sentence  simplifications  rather  than  simplifying sentences as a whole.  We also test models on that  dataset  which  are  inspired  by  model  architecture  used  in  abstractive  summarization. We  hand  generated  portions  of  the  data  and augment  the  dataset  by  further  manipulating those hand written simplifications. Our results show  that  data-augmentation, data-masking, and model architecture  choices used in  summarization provide a solid baseline for comparison on subject aware simplification.\n        </p>\n      </div>\n      `\n    },\n    'doc-summ': {\n      'title': 'Long Document Summarization',\n      'key': 'doc-summ',\n      'date': '2020-12-01',\n      'tags': ['research'],\n      'docBodyHtml': `\n      In a <a href='https://drive.google.com/file/d/1QmPOt9YyyWidPOGN4WS5y4Ot0COPCg9x/view?usp=sharing'>paper</a>\n      still under submission, we outline the task of summarizing long documents with heavy domain-specific words in low-resource settings. We assemble a dataset of public legal briefs and use expert annotations to identify key points, then use a two-step pipeline to extract-then-summarize.\n      This paper was done through my professional work and in collaboration\n      with students at UMass Amherst. \n      \n      <br /> <br />\n        Here's the abstract:\n        <br />\n        <div class=\"bp3-card\">\n          <p class=\".modifier\">\n            Abstractive summarization is the task of compressing a long document into a coherent short document while retaining salient information. Modern abstractive summarization methods are based on deep neural networks which are data hungry algorithms. Since collecting summarization datasets is expensiveand time-consuming task, practical industrial settings are usually low-resource. In this paper, we study a challenging low-resource setting of summarizing long legal briefs with average source document length 4268 words and only 120 available (document, summary) pairs. To account for the data scarcity, we used a modern pretrained abstractive summarizer BART (Lewis et al., 2020), but noticed it is only able to achieve 17.9 ROUGE-L as struggles with long documents. Hence, we attempt to compress these long documents by identifying salient sentences in the source which best ground the summary, using a novel algorithm based on GPT2 (Radford et al., 2019) language model perplexity scores that operates within the low resource regime. On feeding the compressed documents to BART, we observe a 6.0 ROUGE-L improvement, and our method also beats several competitive salience detection baselines. Furthermore, our identified salient sentences tend to agree with an in-dependent human labeling by domain experts.\n          </p>\n           </div>\n      `\n    },\n    'trees-game-1': {\n      'title': 'Quarantine Project: Photosynthesis',\n      'key': 'trees-game-1',\n      'date': '2020-11-22',\n      'tags': [\"application development\"],\n    },\n    'qd-rl-1': {\n      'title': `Quality Diversity in Reinforcement Learning: Progress on Work`,\n      'key': 'qd-rl-1',\n      'date': '2020-11-22',\n      'tags': ['research'],\n      'docBodyHtml': `\nQuality diversity is a school of reinforcement learning algorithms which maintain an abundance of good-yet-different\nsolutions rather than optimize for a specific goal. <br /> <br />\nIn our a working <a href=\"https://drive.google.com/file/d/1HCDLNPCOfb9KzZUyT5pWELu1FIaBUL6x/view?usp=sharing\"> paper </a>\nwith Prof Julian Togelius, we explore how members of this class of of algorithms can outperform simple evolutionary search.\n<br /> <br />\nOur paper is essentially a negative result; for our toy problem, we have yet to find meaningful improvements.\nHowever, we do come away with a better characterization of these algorithms, and promising directions for our continued work.\n  \n<br /> <br />\nHere's the abstract:\n<br />\n<div class=\"bp3-card\">\n  <p class=\".modifier\">\nThe Reinforcement Learning field is strong on achievements and weak\non reapplication; a computer playing GO at a super-human level is still\nterrible at Tic-Tac-Toe. This paper asks whether the method of training\nnetworks improves their generalization. Specifically we explore core quality\n diversity algorithms, compare against two recent algorithms, and propose\n  two new algorithms to deal with shortcomings in existing methods.\nOur work raises important points about the choice of behavior criterion in\nquality diversity, the interaction of differential and evolutionary training\nmethods, and the role of offline reinforcement learning and randomized\nlearning in evolutionary search.\n      </p>\n    </div>\n      `\n    },\n    'enc-dec': {\n      'title': 'An Updated Encoder-Decoder Tutorial',\n      'key': 'enc-dec',\n      'date': '2020-11-22',\n      'tags': ['research', 'bug report'],\n      'docBodyHtml': `\n      I wrote this after seeing Fracois Chollet's similar <a href='https://blog.keras.io/a-ten-minute-introduction-to-sequence-to-sequence-learning-in-keras.html'> encoder-decoder tutorial </a>. \n      Encoder-decoders are fairly universal solutions to sequence to sequence problems, like translation or sentence simplification.\n      <br /> <br />\n      What's great about this version?\n        <ul>\n          <li>It uses <a href=\"https://arxiv.org/abs/1907.11692\">Roberta</a>, a well-trained model from the BERT family</li>\n          <li>The Hugging Face <a href=\"https://huggingface.co/transformers/index.html\">transformers</a> will let you upgrade to other models</li>\n          <li>It's based on pytorch</li>\n          <li>There are two toy problems for testing encoder-decoder training, based on the num2words package</li>\n        </ul>\n      See Training and Evaluation Code, and bottom for other details. <br />\n      <h3>Training and Evaluation code</h3>\n      <Pre>\nimport logging\nimport random\nimport torch\nfrom num2words import num2words\nfrom transformers import EncoderDecoderModel, RobertaTokenizer, AdamW\n\n\"\"\"\nPARAMETERS AND LOGGING\n\"\"\"\nmodel_name = 'roberta-base'\nrun_name = 'numbers'\n\nepochs = 50\nbatch_size = 64\nlearning_rate = 3e-5\ndevice = 'cpu'\n\nlog_file_name = './{}-{}-epch-{}-batch-{}-lr-{}-out.log'.format(run_name, model_name, epochs, batch_size, learning_rate)\nlogging.basicConfig(filename=log_file_name, level=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler())\n\n\"\"\"\nDATASETS\n\"\"\"\ndef say_numbers():\n    \"\"\"\n    100 -> one hundred\n    \"\"\"\n    amount = 500\n    data = [\n        (str(i), num2words(i))\n        for i in range(amount)\n    ]\n    random.shuffle(data)\n\n    return data\n\ndef count_next_number():\n    \"\"\"\n    one hundred -> one hundred and one\n    \"\"\"\n    amount = 501\n    data = [num2words(i) for i in range(amount)]\n    paired = [(d1, d2) for d1, d2 in zip(data, data[1:])]\n    return paired\n\n\ndef eng_fra_data():\n    \"\"\"\n    one -> un\n    curl -O http://www.manythings.org/anki/fra-eng.zip\n    unzip fra-eng.zip\n    \"\"\"\n    data_path = './fra.txt'\n    data = []\n    with open(data_path, 'r', encoding='utf-8') as f:\n        lines = f.read().split('\\\\n')\n\n        for line in lines[:10000]:\n            input_text, target_text, _ = line.split('\\\\t')\n            data.append((input_text, target_text))\n\n    return data\n\n\ndef divide_chunks(l, n):\n    # looping till length l\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n\n\n\n\"\"\"\nSET UP TRAINING DATA AND MODEL\n\"\"\"\ndef tokenize(text):\n    toks = tokenizer.encode(text)\n    return pad_to_len(toks)\n\n\ndef pad_to_len(toks, max_len=15):\n    if len(toks) <= max_len:\n        return toks + [0] * (max_len - len(toks))\n    return toks[:max_len]\n\n\ndata_encoded = say_numbers()\n\ntrain_len = int(0.9 * len(data_encoded))\ntrain_data = data_encoded[:train_len]\ntest_data = data_encoded[train_len:]\nlogging.info('len train %d, len test, %d', len(train_data), len(test_data))\n\ntokenizer = RobertaTokenizer.from_pretrained(model_name)\nmodel_save_dir = '/Users/bradwindsor/gs_projects/transformers/training/'\n\nmodel = EncoderDecoderModel.from_encoder_decoder_pretrained(model_name, model_name)\nmodel.train()\nmodel.to(device)\n\n\n\"\"\"\nTRAIN\n\"\"\"\ntotal_steps = epochs * int(len(train_data) / batch_size)\noptimizer = AdamW(model.parameters(), lr=learning_rate)\n\n# warmup_frac = 0.1\n# scheduler = get_linear_schedule_with_warmup(optimizer, total_steps * warmup_frac, total_steps)\n\nlogging.info('first datapoint')\nlogging.info(str(train_data[0][0]))\nlogging.info(str(tokenize(train_data[0][0])))\nlogging.info(str(train_data[0][1]))\nlogging.info(str(tokenize(train_data[0][1])))\nlogging.info('beginning train')\n\n\nfor epoch in range(epochs):\n    cume_loss = 0\n    for chunk in divide_chunks(train_data, batch_size):\n        inp_ids = torch.tensor([tokenize(e[0]) for e in chunk]).to(device)\n        out_ids = torch.tensor([tokenize(e[1]) for e in chunk]).to(device)\n        optimizer.zero_grad()\n        loss, _, _, _ = model(input_ids=inp_ids, decoder_input_ids=out_ids, labels=out_ids)\n        loss.backward()\n        optimizer.step()\n        # scheduler.step()\n        logging.info('...loss %f', loss.item())\n        cume_loss += loss.item()\n\n    if epoch % 999 == 0:\n        model.save_pretrained(model_save_dir)\n\n    logging.info('epoch %d, loss %d', epoch, cume_loss)\n\n\n\"\"\"\nRUN INFERENCE\n\"\"\"\ndef run_snip(snip, name):\n    inp_ids = torch.tensor([tokenize(e[0]) for e in snip]).to(device)\n    generated = model.generate(inp_ids, decoder_start_token_id=model.config.decoder.pad_token_id)\n    logging.info('%s data %s', name, str(snip))\n    logging.info('generated %s', str(generated))\n\n    gen = generated.cpu().numpy()\n    for row in gen:\n        logging.info(str(row))\n        logging.info(str(tokenizer.decode(row)))\n\n\nsnip = train_data[:10]\nrun_snip(snip, 'train')\nsnip = test_data[:10]\nrun_snip(snip, 'test')\n</Pre>\n<h3>Modifications to use a local or pretrained model</h3>\nHuggingface will automatically download Roberta, but perhaps you want to use a pretrained model. In that case, do this:<br /> <br />\n<Pre>\nmodel_path = '/home/training/roberta-full/'\ntokenizer = RobertaTokenizer.from_pretrained(model_path)\nencoder_decoder_config = EncoderDecoderConfig.from_pretrained(model_path)\nmodel = EncoderDecoderModel.from_pretrained(model_path, config=encoder_decoder_config)\n</Pre>\n\n\n`\n    },\n    '005': {\n      'title': 'Javascript and Python Rosetta Stone',\n      'key': '005',\n      'date': '2020-08-09',\n      'tags': ['application development'],\n    'docBodyHtml': `\n      For the many people who learn either python or javascript, it is worth noting that\n      how incredibly close you are to using the other. One reason is that JSON is the\n      language of REST calls and as such, both languages deal with lists\n      [] and maps {}. Here is an abridged translation:\n      <table class=\"bp3-html-table .modifier\">\n        <thead>\n          <tr>\n            <th>Task</th>\n            <th>Python</th>\n            <th>Javascript</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Create and filter a list</td>\n            <td>\n<Pre>\na = [1, 2, 3, 4]\n[n for n in a if not n % 2 == 0]\n\n<i>[1, 3]</i>\n</Pre>\n            </td>\n            <td>\n<Pre>\nlet a = [1, 2, 3, 4];\na.filter(n => n % 2 !=0);\n\n<i>[1, 3]</i>\n</Pre>\n            </td>\n          </tr>\n          <tr>\n            <td>Create two maps and merge them</td>\n            <td>\n<Pre>\none = {'a': 1}\ntwo = {'b': b}\n{**one, **two}\n\n<i>{a: 1, b: 2}</i>\n</Pre>\n            </td>\n            <td>\n<Pre>\nlet one = {'a': 1}\nlet two = {'b': b}\n{...one, ...two}\n\n<i>{a: 1, b: 2}</i>\n</Pre>\n            </td>\n          </tr>\n          <tr>\n            <td>Print each element in <br />\n             a list with a running counter</td>\n            <td>\n<Pre>\na = [1, 2, 3, 4]\nfor i, ele in enumerate(a):\n    print(ele, i)\n\n\n<i>1, 0...</i>\n</Pre>\n            </td>\n            <td>\n<Pre>\nlet a = [1, 2, 3, 4];\na.forEach((ele, i) => {\n    console.log(ele, i);\n}\n\n<i>1, 0...</i>\n</Pre>\n            </td>\n          </tr>\n          <tr>\n            <td>Sort then map</td>\n            <td>\n<Pre>\ncities = [{\"city\":\"new york\", \"land_area\":302.6},\n          {\"city\":\"seattle\", \"land_area\":83.9},\n          {\"city\":\"kansas city\", \"land_area\":315}]]\ncities = sorted(cities, key=lambda x: x[‘land_area’])\ncities = [c[‘city’] for c in cities]\n\n\n<i>[‘new york’, ‘seattle’, ‘kansas city’]</i>\n</Pre>\n            </td>\n            <td>\n<Pre>\nlet cities = [{\"city\":\"new york\", \"land_area\":302.6},\n              {\"city\":\"seattle\", \"land_area\":83.9},\n              {\"city\":\"kansas city\", \"land_area\":315}];\n\ncities = cities.sort((a, b) =>  {a.land_area - b.land_area})\n               .map((d)  => d.city );\n\n<i>[‘new york’, ‘seattle’, ‘kansas city’]</i>\n</Pre>\n            </td>\n          </tr>\n          <tr>\n            <td>Accumulate on each <br />\n             element of a list</td>\n            <td>\n<Pre>\narea_km = 0\nfor d in cities:\n    area_km += d[‘land_area’] * 2.6\n\n<i>1823.9</i>\n</Pre>\n            </td>\n            <td>\n<Pre>\nlet areas_km = cities.reduce( (acc, d) => {\n                          acc += d.land_area * 2.6;\n                      }, 0);\n\n<i>1823.9</i>\n</Pre>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      `\n    },\n    '004': {\n      \"title\": \"4 Problems in NLP We've Tried to Solve But Haven't Yet\",\n      'key': '004',\n      \"date\": \"2020-07-03\",\n      \"tags\": [\"research\"],\n      \"docBodyHtml\": `\n      We've solved the Turing test: since 1980 there have been computers\n      which we can't tell apart from humans. We have Alexa in our homes,\n      Google answers our questions, Siri pulls up our favorite songs or movies on command.\n      With so much done, what is there in NLP which we can't yet do?\n      <br /><br /><h4>Technical question answering</h4>\n      A computer can't answer quetions like 'Why is Microsoft Word broken?'. See the <a href='https://www.aclweb.org/anthology/W15-4640.pdf'>\n      Ubuntu dialogue corpus</a>; attempts to provide helpful answers are at <a href='https://arxiv.org/pdf/2003.04976.pdf'>\n      5% F1</a>, or the <a href='https://leaderboard.techqa.us-east.containers.appdomain.cloud'/>\n      IBM TechQA dataset</a>, where results are working ~50% of the time.\n      <br /> <br />\n      While <a href='https://arxiv.org/pdf/1909.01958.pdf'>\n      getting an \"A\" on a 12-th grade science exam</a>\n      is a notable example of solving hard questions with a book as reference, and there are some attempts to build bots to\n      <a href='https://www.techrepublic.com/article/want-to-be-a-better-programmer-try-microsofts-code-writing-question-answering-stack-overflow-bot/'>\n      help answer Stack Overflow questions</a>,\n      we are a long way from doing this for any domain and reference material.\n      <br /> <br />Lastly, the best answer to \"Why isn't my Arch installation working?\" might begin,\n      \"Do you see your bootloader start on startup?\" dialogue and investigation are part of any help desk.\n\n      <br /><br /><h4>Lifelong Learning</h4>\n      Given enough data, we can teach a network to do anything. Do we always need new data to do new things though?\n      <br />\n      Reusing past learning is arguably the goal of expressing knowledge in an explicit format (as with knowledge bases or formal logic)\n      or language models. And while there is evidence with <a href='https://arxiv.org/pdf/2005.14165.pdf'>GPT-3</a> that sufficient pre-training on\n      large enough corposes of text can help solve many problems with just a few (or one) examples,\n      much neural network fine-tuning suffers from a problem called \"catastrophic forgetting\";\n      the more you train for one task, the less suited you are for another.\n      <br />\n      Having a system which continuously accumulates knowledge from prior tasks and uses it for future tasks\n      is the goal of a paradigm known as <a href='https://www.cs.uic.edu/~liub/lifelong-machine-learning-draft.pdf'>\n      lifelong learning</a> (a superset of transfer learning), and it is, as of yet, unsolved.\n\n      <br /><br /><h4>A Persuasive AI </h4>\n      I know, I know, IBM's Project Debater <a href='https://www.youtube.com/watch?v=m3u-1yttrVw'>won a broadcast debate against a human</a>. Yet the constraints in that debate (has to be Wikipedia-referenceable)\n      and in the debate's sub-genre (nothing open-ended like \"propose a plan to do X\"), as well as\n      IBM's own continuing work on this topic,\n      point to this being an unfinished area. More generally, these efforts\n      seem focused on appearing logical to a panel of impartial judges -- anyone who's ever\n      tried to <a href='https://genius.com/The-fray-how-to-save-a-life-lyrics'>convince a friend</a>\n      knows changinging viewpoints is a matter of facts, feelings, motivations, and personal experiences.\n      You might even start by <a href='https://mygestaltherapy.com/what-is-the-socratic-method-how-to-persuade-anyone/'>\n      accepting their view</a>.\n      <br /> <br />\n      When Alexa can persuade me I should exercise today, I should change my political party, take one\n      job offer over another, or make peace with the person I'm fighting, that will feel like a different AI.\n\n      <br /><br /><h4>Explain like I'm 5 </h4>\n      \"If you truly understand your PhD Thesis, you'll be able to explain it to a\n      5-year old.\" While there are\n      <a href='https://www.quora.com/What-is-your-PhD-thesis-in-one-sentence'>\n        multiple\n      </a>\n      <a href='https://lolmythesis.com/'>\n        websites\n      </a>\n      devoted to this, we're pretty far from being able to read a scientific\n      paper (\"Subjective Social Status and Major  Depression: A Path Analysis of\n      Biological and Psychosocial Mechanisms\") and re-express it in common terms\n      (\"Feeling nervous about what others think of you makes you depressed.\")\n      There's at least <a href='https://research.fb.com/wp-content/uploads/2019/07/ELI5-Long-Form-Question-Answering.pdf'>one paper</a>,\n      and much related work in abstractive summarization and\n      sentence simplification, but both are incomplete.\n\n      <br /><br /><h4>And every other</h4>\n      The problem space of natural language processing is anything which has\n      been accomplished with writing or spoken word. Anything which has been done with human words or thoughts,\n      and not yet with a computer, is an unsolved part.\n      `\n    },\n    '003': {\n      'key': '003',\n      'title': 'New Paper: Causality and Batch RL',\n      'date': '2020-06-03',\n      'tags': ['research'],\n      'docBodyHtml':`\n        Written with professor Joan Bruna in the <a href='http://mathsdl-spring20.willwhitney.com/'>Mathematics of Deep Learning course</a>,\n        our group released a <a href='https://arxiv.org/abs/2006.02579'>paper</a>\n         about the intersection of two different fields related to AI:\n        <a href='https://en.wikipedia.org/wiki/Causality'>causality</a> and offline (batch)\n        <a href='https://en.wikipedia.org/wiki/Reinforcement_learning'>reinforcment learning</a>.\n        We argue that these are different fields which tackle the same problem with similar\n        mathematical models.\n\n\n        <br /> <br />\n        Here's the abstract:\n        <br />\n        <div class=\"bp3-card\">\n          <p class=\".modifier\">\n            Reinforcement learning algorithms have had tremendous successes in online learning settings.\n            However, these successes have relied on low-stakes interactions between the algorithmic agent and its environment.\n            In many settings where RL could be of use, such as health care and autonomous driving, the mistakes made by most online RL algorithms during early training come with unacceptable costs.\n            These settings require developing reinforcement learning algorithms that can operate in the so-called batch setting, where the algorithms must learn from set of data that is fixed, finite, and generated from some (possibly unknown) policy.\n            Evaluating policies different from the one that collected the data is called off-policy evaluation, and naturally poses counter-factual questions. In this project we show how off-policy evaluation and the estimation of treatment effects in causal inference are two approaches to the same problem, and compare recent progress in these two areas.\n          </p>\n        </div>\n      `,\n    },\n    '002': {\n      \"key\": '002',\n      \"title\": \"How to handle the 'I have an App idea, can you help?' conversation\",\n      \"date\": \"2020-03-01\",\n      \"docBodyHtml\":`\n      Having someone from a business school pitch an app idea is a common-enough situation to merit its own\n      <a href='https://whartoniteseekscodemonkey-blog.tumblr.com/'>tumblr blog</a>\n      and <a href='https://www.reddit.com/r/AskReddit/comments/fknqc2/coders_of_reddit_how_do_you_politely_refuse_your/'>\n        Reddit threads</a>, many of which are less than helpful.\n      <br /> <br />\n      Let's instead consider instead how great it is to have people who thinking creatively about technology and new applications.\n      Next time someone reaches out to you about an app idea, <strong>show them the steps to prove their idea is a great one.</strong> This might look like:\n      <ul>\n      <li>Use Invisionapp or the like to build a mock-up that looks and acts like the real thing</li>\n      <li>Show the mock-up to everyone they know and watch how users interact with it</li>\n      <li>Make a market research survey get people to fill it out</li>\n      <li>Drop $100 on internet ads to see the level of interest you get</li>\n      </ul>\n      A product manager can do much of the product design and business planning without an engineer. And if they assemble the evidence and test the design, who knows, someone might build it.\n\n      `,\n      \"tags\": [\"application development\"]\n    },\n    '001': {\n      \"key\": '001',\n      \"title\": \"So why include that package-lock.json?\",\n      \"date\": \"2019-10-01\",\n      \"tags\": [\"bug report\", \"application development\"],\n      \"docBodyHtml\": `\n      In javascript, package-lock.json seems a fairly extraneous byproduct of npm's build system. At first it seems like you wouldn't want to add it to your repo:\n      <ol>\n        <li>package-lock.json isn't used by the application to run at all </li>\n        <li>package-lock.json gets regenerated when you run npm install, which you'll do anyway </li>\n        <li>package-lock.json can actually make it harder to run an install, if some of your libraries have more recent versions you have to\n        remove package-lock.json before an install will work.</li>\n      </ol>\n      <br />\n      Yet there's one really good reason why you should ignore all the above and absolutely include it:\n      <ol>\n        <li>package-lock.json records exactly which package you installed. If you did npm install <package-name>@latest --save-dev,\n        it probably looks something like this in your package.json: \"<package-name>\": \"*\".\n        <br />\n        Six months from now, when all of your build tools have changed, and the app somehow mysteriously stopped working,\n        you'll need to know what exact package version was that \"*\" when it last worked. And you're not going to know that unless you checked in package-lock.json\n        </li>\n      </ol>\n      `\n    }\n  };\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport articles from '../server/article-list';\r\n\r\n\r\nconst allTags = () => {\r\n  return [...new Set(Object.values(articles).flatMap(a => a.tags))];\r\n}\r\n\r\nconst colorMap = () => {\r\n  const tags = allTags();\r\n  const colorList = ['#a28089', '#33cc33', '#1d2d50', '#133b5c', '#1e5f74', '#8458B3'];\r\n  return tags.reduce((acc, tag, index) => {\r\n    acc[tag] = colorList[index];\r\n    return acc;\r\n  }, {})\r\n};\r\n\r\nexport const articleIndexSlice = createSlice({\r\n  name: 'articleIndex',\r\n  initialState: {\r\n    articles: Object.values(articles),\r\n    selectedArticles: [],\r\n    selectedTags: [],\r\n    allTags: allTags(),\r\n    colorMap: colorMap(),\r\n  },\r\n  reducers: {\r\n    setSelection: (state, action) => {\r\n      state.selectedTags = action.payload;\r\n      if(!action.payload) {\r\n        state.selectedArticles = state.articles;\r\n      } else {\r\n        const selectedValues = new Set(action.payload.map(v => v.value));\r\n        state.selectedArticles = state.articles.filter(article => article.tags.filter( x => selectedValues.has(x)).length > 0);\r\n      }\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { decrement, incrementByAmount, setSelection } = articleIndexSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\nexport default articleIndexSlice.reducer;\r\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Tag } from \"@blueprintjs/core\";\n\nexport default ({article, colorMap}) => {\n    const history = useHistory();\n    const {date, docBodyHtml, key, tags, title} = article;\n    return (\n        <div>\n            <h4>\n              <a\n                onClick={() => history.push(`/article/${key}`)}\n                style={{color:'#007bff'}}\n                >\n                  {title}\n              </a>\n            </h4>\n            <p>{date}</p>\n            <p>{tags.map(t => <Tag style={{background: colorMap[t], marginRight: 5}}>{t}</Tag>)}</p>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  setSelection,\n} from './article-index-slice';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport AsyncSelect from 'react-select'\n\nimport ArticlePreview from './article-preview';\n\nexport function ArticleIndex() {\n  const allArticles = useSelector((state) => state.articleIndex.articles);\n  const selectedArticles = useSelector((state) => state.articleIndex.selectedArticles);\n  const allTags = useSelector((state) => state.articleIndex.allTags);\n  const colorMap = useSelector((state) => state.articleIndex.colorMap);\n  const selectedTags = useSelector((state) => state.articleIndex.selectedTags);\n  const dispatch = useDispatch();\n  const options = allTags.map((a) => { return {value: a, label: a} })\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col>\n            <h3>Articles</h3>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={7} md={9}>\n            {(selectedArticles.length > 0 ? selectedArticles : allArticles).map((a) => <ArticlePreview article={a} colorMap={colorMap} />)}\n          </Col>\n          <Col xs={5} md={3}>\n            <p>Filter by tag</p>\n            <AsyncSelect\n              options={options}\n              isMulti\n              onChange={(val) => dispatch(setSelection(val))}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport Image from 'react-bootstrap/Image'\nimport {Col, Container, Row} from 'react-bootstrap';\nimport Tree from './trees-game.png'\n\nexport const TreesGame = () => {\n    return <div>\n        <Container>\n            <Row>\n                <h4>Quarantine Project: Photosynthesis</h4>\n            </Row>\n            <Row>\n                <Col xs={6}>\n                    A wonderful <a href=\"https://www.amazon.com/Blue-Orange-Games-Photosynthesis-Strategy/dp/B074K5W5N5/ref=sr_1_2?crid=24LNH0NN4FP3S&dchild=1&keywords=photosynthesis+board+game&qid=1606101325&sprefix=photosynthesis%2Caps%2C265&sr=8-2\">board game</a>,\n                    a goal for this quarantined winter is to make \"trees chess\" playable online.\n                    <br /><br />\n                    What might I learn from this project?\n                    <ul>\n                        <li>React DnD, a more natural user interface</li>\n                        <li>There might be some opportunity for doing low-compute AI</li>\n                        <li>Running a large-scale web application</li>\n                        <li>Most importantly, I will be able to lose to my friends in this again</li>\n                    </ul>\n                    <br />\n                    One early discovery: don't try to do something like polar coordinates, rather,\n                    put everything as rows with CSS to offset by row number, and have an X-Y coordinate system centered at the board's center.\n                </Col>\n                <Col xs={6}>\n                    <Row>\n                        <Image src={Tree} style={{height: '400px'}}/>\n                    </Row>\n                    <Row>\n                        ..a work in in progress..\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n\n    </div>;\n}","import React from 'react';\nimport {TreesGame} from \"./trees-game-1\";\n\nexport default {\n    'trees-game-1': <TreesGame />,\n}","import React from 'react';\nimport { connect } from 'react-redux'\nimport articleComponents from '../articles-components/articles-components-index';\nimport serverArticleList from '../server/article-list.js'\nimport ArticleDisplay from './article-display.js'\n\n// default imports for article server\nimport { Pre } from \"@blueprintjs/core\";\nclass ArticleView extends React.Component{\n  render() {\n    const {articleKey, colorMap, state} = this.props;\n    console.log(articleComponents)\n    if(articleKey in articleComponents){\n      return articleComponents[articleKey];\n    }\n    if(articleKey in serverArticleList){\n      return ArticleDisplay({article:serverArticleList[articleKey], colorMap})\n    }\n    return <div>\n      `No article found with key {articleKey}.`\n      {JSON.stringify(state)}\n    </div>\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const colorMap = state.articleIndex.colorMap;\n  const articleKey = ownProps.match.params.articleKey;\n  return {\n    articleKey,\n    colorMap,\n    state\n  }\n}\n\nexport default connect(mapStateToProps)(ArticleView)\n","import React from 'react';\nimport {\n  Link\n} from 'react-router-dom';\nimport { Button, Tag } from \"@blueprintjs/core\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\nexport default ({article, colorMap}) => {\n    const {title, date, docBodyHtml, tags} = article;\n    return (\n      <Col>\n        <Row>\n          <Col>\n            <h4>{title}</h4>\n            <p>{date}</p>\n            <p>{tags.map(t => <Tag style={{background: colorMap[t], marginRight: 5}}>{t}</Tag>)}</p>\n            <div dangerouslySetInnerHTML={{__html: docBodyHtml}} />\n            <br />\n            <Link to='/articles'>\n              <Button>\n                Back to list\n              </Button>\n            </Link>\n          </Col>\n        </Row>\n      </Col>\n    );\n}\n","import React from 'react';\nimport { ArticleIndex } from '../article-index/article-index';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport hike from './hike.jpg'\nexport const Home = () => {\n  const width = window.innerWidth;\n  const isMobile = width < 400;\n  return <Col>\n      <Row>\n        <Col>\n          <img src={hike} />\n        </Col>\n        <Col style={{display:'flex', alignItems: 'center'}}>\n          <p style={\n          {\n            color: isMobile ? 'white': 'black',\n            size: isMobile ? 12 : 20,\n            fontWeight: isMobile ? 'bold': 'normal'\n          }}><i>Each day a step at a time.</i></p>\n        </Col>\n      </Row>\n    </Col>\n}\n// <p>A site by Brad Windsor.</p>\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nexport const About = () => {\n  return <Container>\n      <Col>\n        <div>\n          <h1> About </h1>\n          <p> Hello! I'm Brad! I like code and I like people. On this blog I talk about programming, expecially the things I'm learning through my master's program. Opinions are my own. </p>\n\n          <h4> Career </h4>\n          <p> I work on natural language processing in finance. In the past I've been a project manager and data engineer. </p>\n\n          <h4> Volunteer </h4>\n          <p> I've taught <a href='https://www.microsoft.com/en-us/teals'>computer science in a highschool</a>,&nbsp;\n          <a href='https://www.digital.nyc/investors/deltanyc-better-pro-bono-tech'>consulted with nonprofits</a>,&nbsp;\n          <a href='https://github.com/bwindsor22/speechr'>tracked hate speech</a>,&nbsp;\n            and been the voice at the end of a <a href=\"https://samaritansnyc.org/24-hour-crisis-hotline/\">suicide hotline</a>. Economic mobility and mental health are my causes of choice.</p>\n\n          <h4> Spare Time </h4>\n          <p> Talk to me about glass blowing, marathons, pop music, or any <a href='https://a24films.com/films'>movie by A24</a>.</p>\n\n          <h4> More About </h4>\n          <p> You can follow me on <a href=\"https://twitter.com/windsor_brad\">twitter</a>, <a href='https://www.linkedin.com/in/brad-windsor-3ba33727/'>LinkedIn</a>, or <a href=\"https://github.com/bwindsor22\">github</a>. My email is bwindsor22@gmail.com.</p>\n        </div>\n      </Col>\n    </Container>\n}\n","import React from 'react';\r\n\r\nimport {\r\n  Route,\r\n  Switch,\r\n  BrowserRouter as Router\r\n} from 'react-router-dom';\r\n\r\nimport { Header } from './app/components/Header.js'\r\nimport { Home0 } from './features/home/Home0.js'\r\nimport { ArticleIndex } from './features/article-index/article-index.js'\r\nimport ArticleView from './features/article-view/article-view.js'\r\nimport { Home } from './features/home/Home.js'\r\nimport { About } from './features/about/about.js'\r\n\r\nfunction App() {\r\nreturn (\r\n  <div className=\"App\">\r\n      <Router onUpdate={() => window.scrollTo(0, 0)}>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path='/articles' component={ArticleIndex} />\r\n          <Route path=\"/article/:articleKey?\" component={ArticleView} />\r\n          <Route exact path=\"/game\" component={Home0} />\r\n          <Route exact path=\"/about\" component={About} />\r\n        </Switch>\r\n      </Router>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counter-slice';\r\nimport articleIndexReducer from '../features/article-index/article-index-slice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    articleIndex: articleIndexReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/trees-game.b55e67d5.png\";","module.exports = __webpack_public_path__ + \"static/media/hike.d8b68062.jpg\";"],"sourceRoot":""}